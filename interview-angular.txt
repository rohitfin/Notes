=> What is angular?
    Angular is open source of JavaScript framework. Single page application with multiple views. Angular is written in type script. 
    It's maintained by Google.Angular helps build interactive and dynamic single page applications (SPAs) with its compelling 
    features including templating,  two-way binding, modularization, RESTful API handling, dependency injection, and AJAX handling.

=> Property Binding => Property Binding one directional. Means made changes on .ts file reflect on .html file.

=> One way binding => In one way binding data flows from one direction. Either from view to component or from component to view.

=> Two way binding =>  It's use for sharing data .html to .ts or .ta to .html file. With two way binding change values simultaneously.

=> template Expression => The content inside the double braces is called Template Expression = {{ templateExpression }}

=> Component => Component is a basic block of content that represent  specific view.

=> Decorator
    With input decorator we can get data from component to component
    Create own event like click with output() and event emitter. With output() pass custom event from child component to parent component.
    
        Input decorator => Bind property from parent to child component.


        Output decorator => Pass data from child to parent component. 
        It's happening on some event so to raise an event output must have type of event emitter.  Which is a class an angular core 
        that use to emit() custom event.

    Event emitter =>
        Create custom event with event emitter and with the help of @output we transfer pur event component to component


    Directives => 
        Directives are attribute/class that add additional behavior to the elements. With directive we manage forms, lists, styles and
        what users see. 
        Different type of directives
        1. Component directives
        2. Attributes directives - change the appriance or behaviour of the elements.
        3. Structural directives - change the structure of DOM by adding or removing DOM element

        Component directive
        Which is template. This type of directives most common because it's HTML.

        In-built attribute directives
        Listen to modify the behaviour of the elements attributes, properties and components. Ex NgClass, NgStyle, NgModel

        Structural directives
        Structural directive responsible for html layout. Adding, removing and manipulating to the host element.
        *NgIf - conditionally hide and show
        *Ng for - repeat a node each item of the list
        *NgSwitch -  switch alternative views


    Constructor
        Constructor runs when object or component initialized 

    What's is interface?
        Same as class

    Dependencies injection
        Dependencies are services or object with class need to perform its function


    What's is service and how to use?
        Service were we write our logic  interacting with our API's.

        Service is just a class. It does bring the injectable and has  injectable decorator and it's provide to the application level

        Import on the component. If we want to use the service then need to add services into the constructor as a provider

    What is obervarable?
        Use obeservable because if we dealing with asynchronous  data like fetching data from server.

        import {obervarable, of } from 'rxjs';
        Import "obervarable and of" on the service
        Make obeservable and subscribe() on the component.


    Pipes => 
        Pipes are simply function we can use on our template which accept  input value ( parameters) and return a formatted value.
        Pipe use for DATA manipulation. Angular has in-built pipes like uppercase, lowercase, percentage and currency. We can also create 
        custom pipe. Pipe can be provided with argument by using colon ( : ) sign.
        [ ng g pipe pipeName ]


    Component Life Cycle Hook => The life cycle hooks are the methods that angular invokes on directives and components as it creates,
        changes, and destroys them.

    Module => module is a container for a group of related component every angular app at least one module which we call app module. 
        each module responsible for specific area of our application in that module.  The Components, Templates, Directives, Pipes, 
        and Services, which implements that feature become part of the module. 

    Services => Services allow us to create reusable code and use it every component that needs it.

    Dependency injection => Dependency injection means injecting or providing the dependencies to a class into it's constructor.
    angular has a dependency injection  framework build into it when going to create an instance of a component it can inject the 
    dependencies but in order for that to work we need to register these dependencies somewhere in our module.  

    Router => The Router module handles the navigation.The Routing allows you to move from one View to another View.  

    Data Binding => The Component passes the data to the view using a process called Data Binding.


    ngOnInit void => 
        It is life cycle method.It runs on load.
        void means it does not return anything. We can write onload functions on ngOnInit.

    Typescript
        Typescript is not internary language.
        Typescript is super set of JavaScript. That means Any valid JavaScript code also valid typescript code.
        But typescript some additional features do not existing on current JavaScript


    Life cycle hooks
        In angular, every component has lifecycle. Angular create and renders these components and also destroy them before removing 
        from the DOM. This is achieve with the help of lifecycle hook.
        ngOnChanges( ) - data set or re-set data bound input properties.
        ngOnInit( ) - initialised the component or directives, after the first angular display the data bound property and set the 
        input properties.
        ngDoCheck( ) etc.



    Ng Model
        Ng Models are container that reserve a block of code to an workflow.
        @NgModel takes metadata object that describes how to compile the components template and how to create an injector an runtime. 
        Ng models identified modules, services, pipes and directives


    Ng content
        Ng content use as a projection to take html into another component.
        With <ng-content> user can present there own content.

    Template statements
        Template statements is response on event raise by target like element, component or a directive. 



    Controller
    Angular controllers control the data of  angular application. They are regular JavaScript objects. The ng-conroller defines the 
    application controller.


    What are advantages of angular?
        Functionality, Consistency, Productivity, Maintainability, Modular development structure, Angular Material.

    Who is using angular?
        Microsoft Office, Deutsche Bank, Mixer, Santander, Gmail, Forbes, Upwork, PayPal.


    Why you should not use angular?
        The biggest drawback of Angular was poor accessibility for page scrapers and search crawlers

    What are the advantages of Angular?
        Two-way data binding.
        DOM manipulation, 
        Improved server performance, 
        Faster application prototyping, 
        Responsive web, 
        Highly testable products, 
        The MVVM architecture, 
        Use of directives.

    What are the disadvantages of Angular?
        SEO problems,
        Concept of Dependency Injection and Inversion Of Control,

    why not jquery use in angular?

    Encapsulation


* Host binding and host lisitener
* components vs ngOnInit
* What is Module 
* Authentication vs Authorization
* What is NPM 
* What is RXJS
* How routing work of standalone component
* How to load standalone component.
* How load component lazyliy
* Pre loading 
* Eager loading
* lazy loading
* environment configration
* Viewchild, viewChildren
* smart component vs dump component
* Pre loading 
* Resolver 
* Debounce
* Type of guard.
* Type of Life Cycle
* How angular loads.
* Dark mode to light mode how to change.
* Pagination
* Inifite Scroll 
* Compress 
* ng serve vs ng build
* SSR 
* App Initializer 
* If don't have package file what will happen.
* Dependency vs dev dependencies
* Track by
* Angular Analiser
* PWA APP
* Multi step form.
* How to check code quality.
* How much components get time to load.
* Component size
* Mememory Leak
* How stop or delay api call.










