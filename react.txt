=> Install node js => 
=> Install react js => npm install -g create-react-app
=> Create project => create-react-app ProjectName

React is an open-source front-end JavaScript library for building user interfaces.
It is maintained by Facebook. React can be used as a base in the development of single-page or mobile applications.

=>  JSX
    JSX is a syntax extension to JavaScript. JSX produces React “elements”. 
    After compilation, JSX expressions become regular JavaScript.

=> Rendering Elements 
    for rendering need two things first what needs to be render and second where we want to render.
    <div id="root"></div>
    const element = <h1>Hello, world</h1>;
    ReactDOM.render(element, document.getElementById('root'));

=> Ternary operator
    render() {
        return (
            <div>
                {true ? ( <div>true<div/> ) : ( <div>false<div/>)}
            </div>
        );
    }

=> Creating elements in 3 ways
    const element = ( 
        <div>
            <h2 className="title">hello </h2>
            <h3>World!</h3>
        </dvi> 
    );    

    =>> second way Creating element
        const element = React.createElement(
            'h1',
            {className: 'title', tabIndex: 0, title: 'title'},
            'Hello World'
        );    

    =>> third way Creating element
        const element = {
            type: 'h1',
            props: {
                className: 'title',
                children: 'Hello, world!'
                }
        };    

=> Specifying Attributes with JSX (uses camelCase)
    const element = <div tabIndex="0"></div>;
    const element = <div className="title"></div>;
    const element = <img src={user.avatarUrl}></img>; (use curly braces to embed a JavaScript expression in an attribute)
    const element = <img src={user.avatarUrl} />;

=> setInterval(functionName, 1000); // take  2 parameter first function and second time.       

=> Components and Props
    Components let you split the UI into independent, reusable pieces.
    components are like JavaScript functions. They accept arbitrary inputs (called “props”) and 
    return React elements describing what should appear on the screen.

=> Function Components
    function is a valid React component because it accepts a single “props”, always start component names with a capital letter.

    function Multiply(props){
        return props.value * 2;
    }

=> Class Components
    in class component we can access value with "this" keyword.
    class Welcome extends React.Component {
        constructor(props) {
            super(props);
        }
        render() {
            return <h1>Hello, {this.props.name}</h1>;
        }
    }

=> Rendering a Component 
    function Welcome(props) {
        return <h1>Hello, {props.name}</h1>;
    }
    const element = <Welcome name="Sara" />;    
    ReactDOM.render(element, document.getElementById('root'));

=> Composing Components
    Components can refer to other components in their output.

=> Extracting Components
    split components into smaller components.        

=> constructor
    constructor(props) {
        super(props);
    }

=> State 
    State is similar to props, but it is private and fully controlled by the component.

    constructor(props) {
        super(props);
        this.state = {date: new Date()};
    }

=> this.setState()
    updates to the component local state.setState() that accepts a function rather than an object.  

    =>> single 
        this.setState({comment: 'Hello'});

        or

        this.setState(state => ({
            showWarning: !state.showWarning
        }));

    =>> multiple setState() calls into a single update
        this.setState((state, props) => ({
            counter: state.counter + props.increment
        })); 

        or 

        this.setState(function(state, props) {
            return {
                counter: state.counter + props.increment
            };
        });


=> mounting - rendered to the DOM for the first time

=> unmounting - whenever the DOM produced by the function is removed. (last time) 

=> lifecycle methods - combination of mounting and unmounting.

=> componentDidMount()
    output is inserted in the DOM, React calls the componentDidMount() lifecycle method.

=> componentWillUnmount()
    component is ever removed from the DOM, React calls the componentWillUnmount() lifecycle method.

=> Handling Events
    React events are named using camelCase, rather than lowercase.
    With JSX you pass a function as the event handler, rather than a string.
    Another difference is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly.
    
    <button onClick={activateLasers}> // take function without parentheses
        Activate Lasers
    </button>

    =>>
    constructor(props) {
        super(props);
        // This binding is necessary to make `this` work in the callback
        this.functionName = this.functionName.bind(this);
    }
    <button onClick={this.functionName}>
        {this.state.isToggleOn ? 'ON' : 'OFF'}
    </button>

    console.log('this is:', this);


    onClick={() => this.switchNameHandler('Tom Cruise')}
    onClick={this.togglePersonsHandler.bind(this)}
    onClick={this.togglePersonsHandler.bind(this, parameter)}

=> Keys
    Keys help React identify which items have changed, are added, or are removed. Keys should be given to
    the elements inside the array to give the elements a stable identity:
    Keys used within arrays should be unique among their siblings. However, they don’t need to be globally unique. 
    We can use the same keys when we produce two different arrays.

    This Key property helps react update the list efficiently. It only re-render the elements which did change 
    and not the whole list. Make sure that every element has a unique key react can use to compare the elements of the future
    with the elements of the past and only update the dom in places where it needs to update it.
    

=> {props.children}
    <ComponentName> This text will get displayed where we use props.children </ComponentName>

=> Inline style
    <h1 style={{color: "red", fontSize:"20px"}} >Hi</h1>

=> Adding style class
    const title = {
        color: "red",
        fontSize: "20px"
    }        

    <h1 style={title}>He</h1>    













-----------------------------------------
Radium package => pseudo element and media query
-----------------------------------------
Everything get inside render method get executed whenever react re-render the component.
-----------------------------------------

-----------------------------------------
=> passing methods reference between component

    const person = (props) => {
        return (
            <div>
                <p onClick={props.clickHere}>I'm a <b>{props.name}</b> and I am <b>{props.age}</b> years old.</p>
                <p>{props.children}</p>
            </div>
        );
    }

    switchNameHandler = (newName) => {
        this.setState({
        person: [
            { name: newName, age: 33 },
            { name: "Hataki", age: 27 }
        ]
        });
        console.log("Clicked!");
    };

    => first way
    <personDetails 
        name="CLICK HERE!" 
        age="1"
        clickHere={this.switchNameHandler}
    > print Props children 
    </personDetails>

    or 
    => second way
    <button onClick={this.switchNameHandler.bind(this, 'Hero Name here')}>Switch Name</button>
    <PersonCompo
        name={this.state.person[0].name}
        age={this.state.person[0].age}
        clickHere={this.switchNameHandler.bind(this, 'Zabuza Momochi')}
    />

    => third way
    <button onClick={() => this.switchNameHandler('third way')}>Switch Name</button>

-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------
=> access array value with the help of map method
class User extends React.Component{
  render(){
    var u = this.props.user;
    var sum = 2 + 2;
    return (
      <div>
      
        
        {u.firstName.map((value, index) => {
           return (
             <div>
             {index%2 ? (
          <div className="card">
             <p> {index + 1} </p>
              <img src={u.author.avatarUrl} />
               <h3> 
                 {u.firstName[index]}  {u.lastName[index]} 
               </h3>
             </div>
        ) : (
        <h1></h1>
      )}          </div>  
             
           ) 
          })}
        </div>
    );
  }
}
const userDetails = {
  firstName: ["Raja", "Ranni", "Max", "Will"],
  lastName: ["Pandit", "Jadhav", "Doe", "Media"],
  text: 'I hope you enjoy learning React!',
  author: {
    name: 'Kitty',
    avatarUrl: 'https://placekitten.com/g/100/100',
  },
};
var element = <div>
          <User user={userDetails}    />
          </div>;
ReactDOM.render(
  element,
  document.getElementById("root")
);


-----------------------------------------

