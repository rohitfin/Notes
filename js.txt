---- 19 12 18
--------  Selectors 
     $("*"), $(this), $("p:first"), $("ul li:first-child"),$("[href]"),$("a[target='_blank']"), $(":button"), $("tr:even"), $("tr:odd"), $("ul li:eq(3)"), 
	 $("input:not(:empty)"),$(":contains('Hello')"), $("div:has(p)"),$("ul li:gt(3)") [ greater than 3], $("ul li:lt(3)") [ less than 3],	

--------  Events	 
	Mouse Events -  click, dblclick, mouseenter, mouseleave	
	Keyboard Events	- keypress, keydown, keyup	
	Form Events - submit, change, focus, blur 	
	Document/Window Events - load, resize, scroll, unload

	$(selector).event(function(){ // action goes here!!  });  // element.addEventListener("click", FUNCTION__NAME);
	$(selector).on("event", function(){ // action goes here!! });
	$(document).on("event", "selector" function(){ // action goes here!! });
	$(document).on("click", ".btn", functionName); 

	$(selector).on({
		event: function(){  // action goes here!! },
		event: function(){  // action goes here!! },
		event: function(){  // action goes here!! }
	});
	
--------  HTML
* Get & Set Content - text(), html(), and val()	
----Get  the value of an attribute:
	$(selector).attr("attribute")   // document.querySelector('#IDNAME')
	$('input[type="radio"]:checked').val()
	$(select option:selected).val()

----Set the attribute and value:
	$(selector).attr("attribute","value")
	$(selector).prop("checked","checked")
	$('.cls').prop("checked",false)


----Set multiple attributes and values:
	$(selector).attr({"attribute":"value", "attribute":"value",...});

* Methods 
   addClass(), removeClass(), toggleClass(), on, append(), prepend(), after(), before(), remove(), empty(), clone(), 
   replaceWith(), replaceAll(), wrap(), Unwrap(), wrapAll(), wrapInner(), width(), innerWidth(), outerWidth(), position(), 
   offset(), scrollTop(), scrollLeft(), has(), each(), hasClass(), 	

	remove() - Removes the selected element (and its child elements)
	empty() - Removes the child elements from the selected element
	position()- exact location [only top, and left location gives]
	offset()- start location [only top, and left location gives]

	$(selector).addClass("className");
	$(selector).append("Some appended text.");
	$(selector).has(selector-children).css("color","red"); or $("selector:has(selector-children)").css("border", "solid red");
	$("<h2>Hello world!</h2>").replaceAll("p");

* Chaining method
	$(selector).css('color','red').slideUp().slideDown();

* css() Method - 
	css("propertyname","value");
	css({"propertyname":"value","propertyname":"value",...});

* Effects 
	hide(), show(), toggle(speed,callback), fadeIn(), fadeOut(), fadeToggle(), fadeTo(), slideDown(), slideUp(), slideToggle() 	
	
	$(selector).hide(speed,callback);
	
----Animation Effects - $(selector).animate({params},speed,callback);	
	.selector {position: absolute} // important for animate();
	$(selector).animate({
		left: "px",
		opacity: "px",
		width: "px",
		height: "px"
	},3000);
	
----Stop Animations - $(selector).stop();	

* Traversing
<div id="main-outer">
	<ul id="outer">
		<li id="inner">
			<span> </span>	
		</li>
		<li id="inner">
			<b> </b>
		</li>
	</ul>
</div>

* The <div> element is the parent of <ul>, and an ancestor of everything inside of it
* The <span> element is a child of the left <li> and a descendant of <ul> and <div>
* The two <li> elements are siblings (they share the same parent)
* jQuery Traversing - Ancestors :- parent(), parents(), parentsUntil(), closest(), offsetParent()

* Traversing - Ancestors
	 $("span").parent();
	 $("span").parents("ul");	[kha tak]
	 $("span").parentsUntil("div"); [kha tak]

* Traversing - Descendants :- children(), find()
	$("li").children().css("color","red");
	$('li').children('b').css('font-weight','bold');

* Traversing - Siblings :-  siblings(), next(), nextAll(), nextUntil(), prev(), prevAll(), prevUntil()
	$("h2").nextUntil("h6");

* Traversing - Filtering :- first(), last(), eq(), filter() and not(), slice()
		$(selector).filter(".intro");  [other than .intro]

----------------------------------------------------------------------- 

* Selectors
	document.getElementById('selectorName')
	document.getElementsByTagName('selectorName')
	document.getElementsByClassName('selectorName')
	document.querySelector('selectorName')
	document.querySelectorAll('selectorName')

* get and set the data
	element.innerText
	element.innerHTML =  new html content

	element.style.property = new style 	
		[
			document.getElementById("selector").style.color = "blue";
			document.style.cssFloat = "right";
			document.querySelector('selector').style.cssText = 'padding: 10px 20px;color: white'; 
		]

	element.setAttribute(attribute, value)  
		[
			document.getElementById("myImage").src = "landscape.jpg";
					OR 	
			var sel = document.getElementById("myImage");
			sel.src = '../images/img.jpg';
			sel.title = 'this is custom title';
		]

	element.getAttribute(attribute)    
		[
			document.getElementById("myImage").getAttribute('src');
				OR
			var sel = document.getElementById("myImage");
			console.log(sel.src);
			console.log(sel.title);
		]
	

	** form get value
		var name = document.querySelector('.input');
		var sel = document.querySelector('select');
		var selected = document.querySelector('select option:checked');
		var gender = document.querySelector('input[type="radio"]:checked');
		var checkboxList = document.querySelectorAll('input[type="checkbox"]:checked');
		var checkboxValue = [];
		checkboxList.forEach(function(checked){
			checkboxValue.push(checked.value)
		})
		OR
		var sel = $('select option').filter(':selected').val();
		var sel = $('select option:selected').val();
		var checkbox = [];
			$('input[type="checkbox"]:checked').each(function(){
			var val = $(this).val();
			checkbox.push(val);
			});

	* selector.setAttribute('checked', 'true'); 
			
	** select option
		var sel = document.getElementById('selector').selectedIndex;
		var res = document.getElementsByTagName('option')[sel].value;
			OR
		var sel = document.getElementById('ed');
		var res = sel.options[sel.selectedIndex].value;
		console.log(res);
			OR
		var res = document.getElementById('selector').options[document.getElementById('selector').selectedIndex].text;
		console.log(res);

	** radio button
		var gender = document.getElementsByName('gender');
		var genderValue = '';
		for(var i = 0; i < gender.length; i++){
			if(gender[i].checked){
				genderValue += gender[i].value;
			}
		}

	** toggle, add and remove class
		[	var idSelector = document.getElementById('selector');
			var QuerySelector = document.querySelector('selector');

			.classList.add('NEW__CLASS') ---> ADDING NEW CLASS 
			.className = 'NEW__CLASS' ---> ADDING NEW CLASS => first remove classes than add new class so don't use
			.classList.toggle('NEW__CLASS') ---> toggle  CLASS
			.classList.remove('NEW__CLASS') ---> remove  CLASS
		]

	
*  EventListener, removeEventListener() ---> attachEvent(), detachEvent()
	element.addEventListener("click", FUNCTION__NAME);
	element.addEventListener("click", function() {	alert("Hello World!");  });
	element.addEventListener("click", function(){ myFunction(p1, p2); });
	
* DOM 
	-------- document
	URL, .domain, .body, .forms, .head, .images, .links, .title, 
	createAttribute(), .createElement(), createEvent(), createTextNode(), .designMode

	document.designMode = "on"; --> editable or not
	document.doctype.name 
	document.documentMode;

	.value, .innerHTML, #SELECT__OPTION.options[#SELECT__OPTION.selectedIndex].text, offsetWidth, .offsetHeight, 
	screen.width, screen.height, 
	screen.availWidth, screen.availHeight, innerWidth, innerHeight, window.open, window.close

	.addEventListener, .getAttribute(), innerHTML, innerText, querySelector, querySelectorAll, 
	.appendChild(), classList.add(), classList.remove(), .className, .firstChild, .lastChild, firstElementChild, 
	lastElementChild, insertBefore, outerHTML, remove, removeAttribute, removeChild, removeEventListener, replaceChild, tagName, 
	title, dataset, textContent, createTextNode, createElement

* Event 
	mouseover, mouseout, change, click, dblclick, keydown, load, submit, select,
	keypress, mousemove, mouseleave, mouseenter, mousedown, mouseup, focusin, focusout

* slice(), splice(), split(), indexOf(), includes(), prop(), setAttribute(), getAttribute(),

* .contextmenu ---> for right click

* <button onclick="myFunction()">Click me</button>

* <button type="button" onclick="document.getElementById('IDNAME').style.color = 'red'">Click Me!</button>

* two different kinds of data, primitive and objects.
	primitive -- string, number, boolean, null, undefined

* javascript types dynamics

* fill data on alert with the help of prompt. prompt by default give string value.

	prompt("Enter Your Name?");  

*  type of 	--> for checking  type of variables   --> console.log(typeof varName);

* check length of the var or text  -->  console.log(varName.length);

* convert string to number with the help of -->  parseInt(); or 1*varName  -->  var x = parseInt(a);

* convert number into  string with -->     toString();   -->  var x = a.toString();

* NaN means not a number

* Math.ceil();      increasing number select

* Math.floor();   decreasing number select    [ex (3.4)=3, (-2.1)= -3]

* Math.max();     big number select

* Math.min();   small number select

* Math.random();	random no.

* Comparison  Operators 
 	
	1. == 		 [ 1 == 1 (true), 1 == "1" (true) ]	 ( only compar value )

	2. ===		 [ 1 === 1 (true), 1 === "1" (false) ]	( compar value and type both )
	
	3. !=, >, >= [ 1 != 1 (false), 1 != "1" (false) ]	( not equal to value ) ( ! means not equal )
	
	4. !== 		 [ 1 !== 1 (true), 1 !== "1" (true) ]	( not equal operator, not equal to value and type) ( ! = NOT ,  ' ! '  MEAN NOT )	

	5. &&  [ 1 !== 1 && 1 !== "1" ] ( and operator, check both condition same time)  (if both condition is true then true other-wise condition is false )

	6. ||		 [ 1 !== 1 || 1 !== "1" ] ( or operator, check one condition)  (if one condition is true then true , when both condition false then false )

	7. ! 		 [ !1 > 1 ] 	( not operator )	
	
* falsy value --- [ null,'' '', undefine, false, 0 ]

* \n 	
	( just like a break </br> ) for line  break, giving break in prompt text list.

	prompt("1- what is your name?\n 2- how many year's old?\n 3- enter your pet name?\n");

* variable can only store one value. variable like empty container. we put any think in variable.
  Variables are containers that you can store values in. You start by declaring a variable with the var, let or const keyword.

* console.log(); is same as console.warn(); 

* f8 = go to next debugger if there is no debugger finish the debugging.

* f10 = go to next statement 

* f11 = to debug inside

* Conditional (ternary) operator
	function getFee(isMember) {
		return (isMember ? '$2.00' : '$10.00');
	}
	console.log(getFee(true)); // expected output: "$2.00"
	console.log(getFee(false)); // expected output: "$10.00"
	console.log(getFee(null)); // expected output: "$10.0 

* spread operator
	const numbers = [1, 4, 3, 5];
	const newNumbers = [...numbers, 10, 20];
	console.log(newNumbers);

* rest operator
	const filter = (...args)=>{
		return args.filter( el => el ===1 );
	}
	console.log(filter(2,45, 1));


* setInterval();
	repeat a specified function at every given time-interval	
* clearInterval();	
	clears the interval which has been set by setInterval() function before that
* setTimeout();	
	The setTimeout() method executes a block of code after the specified time. The method executes the code only once.

	setTimeout(function(){ alert("Hello"); }, 3000);	

	const time = setInterval(function(){
		console.log(new Date().toLocaleTimeString());
	}, 1000);

	const stop = setTimeout(function(){
		clearInterval(time);
		console.log('stop');
	}, 5000);


* break keyword 
	if condition is true break keyword will stop the condition, and stop before true condition.

	var i = 0;
	while( i < 10 ) {
		i++;
		if( i === 5 ) {
			break;
		}
		console.log(i);
	}

* continue keyword
	if condition is true, leave the true condition and run as on. jump out the true condition.

	var i = 0;
	while( i < 10 ) {
		i++;
		if( i === 5 ) {
			continue;
		}
		console.log(i);
	}

* initialization or starter or starting point
* condition for when our loop should end
* increment or decrement || continues up or down

* for(var i = 5; i < 10; i++ ) {		}

* i++ means i = i + 1; or i += 1;

* loop work on the only true condition, when loop condition is false loop will stop working.

* for loop 

	-----forward count
	for(var i = 5; i < 10; i++ ) { console.log(i); }

	for(const item of items) {}

	-----backward count
	for(var i = 5; i > 0; i-- ) { console.log(i); }

* while loop
	var i = 0;
	while(i <= 10 ){
		console.log(i);
		i++;
	}	

* do while loop 
	var i = 0;
	do{
		console.log(i);
		i++;
	}while( i <= 10 );

 * nesting loop
	loop inside loop called nesting loop.OR loop within a loop. nesting loop parent loop run one time then child loop run all condition, 
	then parent loop run second time then child loop run all condition as on.

	for(var i = 0; i < 10; i++) {
		for(var j = 0; j <= 10, j++){
			consol.log(i + j);
		}
	}

* in single variable store multiple value is called array. array is collection of data.
	array can hold function. array is numeric index number. in javascript array start with 0 (zero) index number.

	var cars = [ "mahindra bolero", "tata indica", "tata safari", "fortuner" ];

	cars.indexOf(fortuner);  // find value position and if value match than give position of the value, if not match -1
	cars.indexOf(fortuner, 0);  // array.indexOf(item, start)
	cars.unshift('swift'); 	// beginning add
	cars.push('jeep');	// end add
	cars.shift();	// first remove
	cars.pop(); 	// last remove
	cars[cars.length] = "honda";	// add to the end
	cars[cars.length];	// length of the array
	cars[cars.length - 3 ] = "Maruti Suziki"    // changing array  
	cars[cars.length - 1];         // check last array 
	Array.isArray(cars) // checking is array or not
	cars.slice(1,3); // slice between 1 to 3;   myArray.slice(startIndex, endIndex);
	cars.toString();  // converting array to string
	cars.reverse(); // reverse array

* slice - Not effect on parent array;
	var array = [1, 2, 3, 4, 5, 6, 7];
	var res = array.slice(2); //	[3, 4, 5, 6, 7]
	var res = array.slice(2, 5); //	[3, 4, 5]

* splice  - its change actual array means parent array
	var array = [1, 2, 3, 4, 5, 6, 7];
	var res = array.splice(2); //	[3, 4, 5, 6, 7]
	var res = array.splice(2, 5); // [3, 4, 5, 6, 7]

* string to array
	var a =  'hello';
	var b = a.split();

* array to string
	var a = ["a", "b", "c", "d"];
	var b = a.join("");

* subtract string value
	var a = 'hello!';
	var b = a.substr(-2);

* indexOf  in array 
	var JSArr = ["A", "B", "C", "D"];
	console.log(JSArr.indexOf("A")) // 0  found at postion 0 
	console.log(JSArr.indexOf("B")) // 1  found at postion 1 
	console.log(JSArr.indexOf("F")) // -1  not found

* includes in array
	var list = ["A", "B", "C", "D", "E"];
	console.log(list.includes("A")); // true
	console.log(list.includes("A",1)); //returns false, as "A" is not present at index 1. 
	console.log(list.includes("B",1)); //returns True , as "B" is present at index 1. 
	console.log(list.indexOf("A") !== -1 ); // true

* concat array
	var one = ["A", "B",];
	var two = ["C", "D", "E"];
	var res = one.concat(two);

* join Array
 	var cars = [["mahindra bolero","tata indica"],["potato"],["football","cricket"]];
	var bike = cars.join(" ");			//	join array  with empty space
	var bike = cars.join("*");			//	join array  with * symbol
	var bike = cars.join("+");			//	join array 	with + symbol

* includes();

* delete values from object and array 
	const myArray = [1, 2, 3, 4, 5];
	delete myArray[1]; // myArray : 1,undefined,3,4,5
	or myArray.splice(3, 1); // myArray : 1, 2, 3, 5



* sort
	the sort method converts the elements into strings then compares their sequences of UTF-16 code units values.

	const num = [80,1,30,10,50,70,20,40,100,5,60,90];
	console.log(num.sort(function(value1, value2){   return value1 - value2})   );

	const fruits = ["Apple", "Mango", "Kiwi", "Orange", "Strawberry"];
	console.log(fruits.sort());

* filter method (<, >)
	for comparing, greater-than, smaller-than its returns array
	
	var numberList = [["2"],["10","12","6"],"5",["15","7","20"]];	
	var res = numberList.filter(function(element, index, array){
		return element < 2;                        // compar with greater-than		
		return element.length > 2;                        // compar with length		
	})
	console.log(typeof res);

* map method 
  add, minus, multiply, divide with map method.

  var numberList = [2,4,5,1,6];
  var res = numberList.map(function(element, index, array){
	  return element + 2;
  })

* reduce method 
	reduce method is combination of filter and map method.

	const numbers = [450, 200, 75, 80, 90];
	const resultSum = numbers.reduce((accumulator, currentElement, index, array) => {
		return accumulator + currentElement;
	}, 0);

	//or
	const resultSum = numbers.reduce((accumulator, value2, index, array) => {
		return accumulator + value2;
	}); // where to start not given so start with accumulator and value2


	var numberList = [10,2,5,67,3,45,];
	var res = numberList.reduce(function(accumulator, element, index, array){ 
	    if(element > 10){
	        accumulator.push(element);
	        return accumulator;
	    }else{
	        return accumulator;
	    }

	},[]); // in array [] formate it will return;
	console.log(res);


	var printPrice = herosPrice.reduce(function(accumulator, element, index, array){
		//return accumulator + element;
		if(element > accumulator){
			return element;
		}else {
			return accumulator;
		}
	},0); // where to start.

* forEach (need atleast one paramenter)
	var cars = [ "mahindra bolero", "tata indica", "tata safari", "fortuner" ];
	var each = cars.forEach(function(element, index, array){
		console.log(index + " : " + element);
	});
	
*  compare objects and string
	var x = "John";             
	var y = new String("John");
	(x === y) // is false because x is a string and y is an object.

* cannot compare objects
	var x = new String("John");             
	var y = new String("John");
	(x == y) // is false because you cannot compare objects.

** Don't Use new Object()
	Use {} instead of new Object()
	Use "" instead of new String()
	Use 0 instead of new Number()
	Use false instead of new Boolean()
	Use [] instead of new Array()
	Use function (){} instead of new Function()

=> object
	A collection of name value pairs. key value pairs.object same as array and in object, we can call function.
	 
		const courses = {
			java: 10,
			javascript: 55,
			nodejs: 5,
			php: 15
		};

		* Methods to loop through objects using javascript for...in Loop
			for (const key in courses) {
				.log(`${key}: ${courses[key]}`);
			}	

		* hasOwnProperty() 
				for (const key in courses) {
				if (courses.hasOwnProperty(key)) {
					console.log(`${key}: ${courses[key]}`);
				}
			}

		* Object.keys() Method - returns an array containing all properties name
			const keys = Object.keys(courses);
			console.log(keys);

		* Object.values() Method -It returns the values of all properties in the object as an array
			Object.values(courses).forEach(val => console.log(val));

		* Object.create();
		* Object.assign();


=> Constructor functions  
	Using Constructor functions :- Constructors are functions that contain a this keyword.
	If we initialize the constructor its runs

	function Person (person_name, person_age, person_gender) {
		this.name = person_name,
		this.age = person_age,
		this.gender = person_gender,
		this.greet = function () {
			return ('Hi' + ' ' + this.name);
		}
	}
	// creating objects
	const person1 = new Person('John', 23, 'male');
	const person2 = new Person('Sam', 25, 'female');

	// accessing properties
	console.log(person1.name); // "John"

	// adding method to person1 object
	person1.print = function () {
		console.log('hello');
	}

=> Prototype
		In JavaScript, a prototype can be used to add properties and methods to a constructor function.

		// adding property to constructor function
		Person.prototype.status = 'Married';

		// prototype value of Person
		console.log(Person.prototype);

		// inheriting the property from prototype
		console.log(person1.status);
		
		// changing the property value of prototype
		Person.prototype = { status:  'UnMarried'}

=> Inheritance 
	function Human(person_name, person_age, person_gender, month){
		Person.call(this, person_name, person_age, person_gender);
		
		this.month = month
	}

	// Inherit Prototype 
	Human.prototype = Object.create(Person.prototype);

	// Instantiate Human Object
	const hum1 = new Human('Mike', '22', 'Male', 'March');

	// use Human Constructor
	Human.prototype.constructor = Human;
	
	console.log(hum1);

=> Sub Class 
	class Human extends Person {
		constructor(person_name, person_age, person_gender, month){
			super(person_name, person_age, person_gender); // get parent properties
			this.month = month;
		}
	}

	// Instantiate Human Object
	const hum1 = new Human('Khabib', '22', 'Male', 'Jan');
	hum1.greet();

* Class 
	Classes is blue print of object. Classes are said to be the “syntactic sugar” of Constructor functions. 

	class Human {
		constructor(FirstName, LastName) {
			this.firstName = FirstName
			this.lastName = LastName
			
			this.sayHello = function () {
				console.log(`Hello, I'm ${firstName}`)
			}
			or 
				sayHello () {
					console.log(`Hello, I'm ${this.firstName}`)
				}

				static staticFunc(){
					console.log('It can not be Instantiate, It can call by its parent');
				}
		}
	}

	const chris = new Human('Chris', 'Coyier')
	console.log(chris.firstName);
	Human.staticFunc();

* Objects Linking to Other Objects (OLOO)

	const Human = {
		init (FirstName, LastName) {
			this.firstName = FirstName
			this.lastName = LastName
			this.sayHello = function () {
			console.log(`Hello, I'm ${firstName}`)
			}
			return this
		}
	}

	//const chris = Object.create(Human)
	//chris.init('Chris', 'Coyier');
	// or
	const chris = Object.create(Human).init('Chris', 'Coyier');
	console.log(chris.firstName);

* scope
 	two type of scope 1.global, 2. local

* paramenter and argument
 
	function func(paramenter-1, paramenter-2){
		console.log("hello");
	}
	func(argument-1, argument-2);

* hoisting 
	function declaration on top is hoisting.
	Hoisting is process of moving function declaration to the top of the file and this is done  
	automatically by the  javascript engine that is executing this code.hoisting only work for function declarations. Functions are Objects.

* Define function two ways
	1. function declaration
	2. function Expression

	1. function declaration

		function walk(){
			console.log("Walk");
		}
		walk();
		OR
		[ this is a hoisting ]
		walk();
		function walk(){
			console.log("Walk");
		}

	2. function Expression  or anonymous function
		var run = function() {
			console.log("run");
		}
		run();

	3. First class function - To ability to use function
		var a = function ( ) {
			return function xyz( ) { }
		}	

* api ajax
		$.ajax({
            url: 'array_of_object.json', //'content.txt'
            type: 'get', 
            error: function(error){
                console.log('Error: ' + error);
              },
            success: function(result){
              for(var i = 0; i < result.length; i++){
                  console.log(result[i].name + " " +  result[i].lastName);
                }
              }
        
        });

	JSON is a syntax for storing and exchanging data.
	JSON stands for JavaScript Object Notation
	JJSON is language independent *
	JSON uses JavaScript syntax, but the JSON format is text only.
	Text can be read and used as a data format by any programming language.
	SON is a lightweight data-interchange format
	JSON is "self-describing" and easy to understand

	When receiving data from a web server, the data is always a string.
	Parse the data with JSON.parse(), and the data becomes a JavaScript object.

	When sending data to a web server, the data has to be a string.
	Convert a JavaScript object into a string with JSON.stringify().


	myJSON = JSON.stringify(myObj);  // '{"name":"John", "age":31, "city":"New York"}';
	myJSON = JSON.parse(myObj);    	//{name: "John", age: 31, city: "New York"};

	JSON in table format in console
	console.table(data);	

  <!-- second Way formate  start -->
        <div class="template" style="display: none">
            <div class="JSON-child-Result-2">
                <div class="card" >
                    <img  class="pok-img card-img-top p-2" src="__imagURL__" alt="Pok Name">
                    <div class="card-body">
                       <h5 class="pok-title card-title">__name__</h5>
                       <ul class="types">
                           __list__
                       </ul>
                   </div>
               </div>
            </div>
        </div>

	var imgurl= res.sprites.other.dream_world.front_default;
     var name = res.name;
     var list = '';
    
     for(var i = 0; i < res.types.length; i++){
         list += '<li>' + res.types[i].type.name + '</li>'
     }
				
	$('#img1').attr('src',imgurl);
    $('#name1').html(name);
    $('#list1').html(list);

    // second way
     var template = $('.template .JSON-child-Result-2').html()
     var _html = template.replace('__imagURL__',imgurl)
                        .replace('__name__',name)
                        .replace('__list__',list);
    $('#JSON-child-Result-2').append(_html);

	<!-- second Way formate  end -->


    <!--  third way  -->
       var aa =`<div class="card" >
       <img  class="pok-img card-img-top p-2" src="${imgurl}" alt="Pok Name">
       <div class="card-body">
          <h5 class="pok-title card-title">${name}</h5>
          <ul class="types">
          ${list}
          </ul>
       </div>
       </div>`;
       $('#JSON-child-Result-3').append(aa);


  => AJAX 
    AJAX ( asynchronous JavaScript and XMl ) is not a language, but it is a concept, Which is used to "send background request to server" 
    and also "get background response from server", without refreshing (reloading) the web page in the browser.
    status code 200 - success and status code 404/500 - error
    
    Get - Used to retrieve / search data from server.
    Post - Used to insert data to server.
    Put - Used to update data on server.
    Delete - Used to delete data from server.

    $(function() {
        var product = $("#product_list");
        product.length && initProduct();
    });

    var _m = _m || {}, _apiName = "APIName"

    _m.Ajax = function(methodName, apiUrl, dataType, requestData, contentType, asyncBoolean) {
        return void 0 === o && (o = !0),
        $.ajax({
            type: methodName,
            url: apiUrl,
            dataType: dataType,
            async: asyncBoolean,
            data: requestData,
            contentType: contentType,
            success: function(e) {},
            error: function(e, t) {
                console.log("error->" + apiUrl + " | Error->", e, t)
            }
        })
    }

    function initProduct() {
        var postData = { isActive = true; }
        _m.Ajax("POST", "api_path_url", "json", JSON.stringify({ postData }), "application/json; charset=utf-8", false).then(response=>{
            console.log(response);
        })
    }

    function getCurrentDateTime(e) {
      var a;
      return (a = void 0 == e ? new Date : new Date(e)).getFullYear() + "-" + ("0" + (a.getMonth() + 1)).slice(-2) + "-" + ("0" + a.getDate()).slice(-2) + "T" + ("0" + a.getHours()).slice(-2) + ":" + ("0" + a.getMinutes()).slice(-2) + ":" + ("0" + a.getSeconds()).slice(-2) + "." + a.getMilliseconds() + "+05:30"
    }
    function getCurrentDateTime() {
        var e = new Date;
        return e.getFullYear() + "-" + ("0" + (e.getMonth() + 1)).slice(-2) + "-" + ("0" + e.getDate()).slice(-2) + "T" + ("0" + e.getHours()).slice(-2) + ":" + ("0" + e.getMinutes()).slice(-2) + ":" + ("0" + e.getSeconds()).slice(-2) + "." + e.getMilliseconds() + "+05:30"
    }

=> callback
	// callback function
	function callMe() {
		console.log('I am callback function');
	}
	// function
	function greet(name, callback) {
		console.log('Hi' + ' ' + name);
		callback();
	}
	// passing function as an argument
	greet('Peter', callMe);

=> setTimeout()
	The setTimeout() method executes a block of code after the specified time. The method executes the 
	code only once.
	setTimeout(function, milliseconds);
	function - a function containing a block of code
	milliseconds - the time after which the function is executed
	The setTimeout() method returns an intervalID, which is a positive integer.

    var n = 0;
    function print(){
    n = n + 1;
    console.log(n);
    }
    var a =  setInterval(print, 1000);

    function b(){
    clearInterval(a);
    }
    setTimeout(b, 10000);

=> Synchronous
	Execution of code step by step.
	Something is happen we want to wait to its completely finished or it's done until we move on next

=> Asynchronous
	Sequence has not been decided.
	Something going on but you don't want to wait till that things is done to continue to run your program to you
	 wants while it's happening

=> Async / await
	Use for fetch data, getting data from API's and calling data from third party's.
	Async always  return promise

=> Promises
	Use to handle asynchronous data.
	Promises are important building blocks for asynchronous operations in JavaScript.
	A Promise is a special JavaScript object. It produces a value after an asynchronous (aka, async) operation completes successfully, or an error if it does not complete successfully due to time out, network error, and so on. Successful call completions are indicated by the resolve function call, and errors are indicated by the reject function call.
	A Promise is in one of these states:
		pending: initial state, neither fulfilled nor rejected.
		fulfilled: meaning that the operation was completed successfully.
		rejected: meaning that the operation failed.
	
	function check( ){ 
		return new Promise( resolve, reject ) {
			Var error = true;
			if ( !error ) { resolve ( )  }
			else { reject ( ) } // or else { reject('Error: Something went wrong.')}
		}
	}
	check( ).then( function ( ){ console.log(123);
		}).catch( function ( ){  console.log (' error '); } ) // or .catch(err => console.log(err) )

	// async / await 
	async function init(){
		await check()
		callBack(); // .then wala function 
	}
	init();

	// Promises with fetch
	var promise1 = 10;
	var promise2 = fetch('https://jsonplaceholder.typicode.com/posts').then(res => res.json()) // because data on string formate so we have to convert into json format
	// Promise.all 
	Promise.all([promise1, promise2]).then(values => console.log(values));

	// Async / await with fetch
	async function fetchData(){
		var res = await fetch('https://jsonplaceholder.typicode.com/posts');
		var dataConvert = await res.json();
		console.log(dataConvert);
	}

=> Closure
	Values are retain in function means when we invoke our  function the values are not lose, we can access those values on our inside functions that is called closure.

	function sum(a){
		console.log(a);
		Var c = 10;
		return function(b){
		return a + b + c;
			}
		OR
		return { 
			getSumTwo: function(b) {
				return a+ b
				}
			},
			getSumThree: function(c) {
				return a+ c
				}
			}

		}
		var call = sum(5);
		console.log( call(10) );
		console.log( call.getSumTwo(5) );
		console.log( call.getSumThree(1) );

=> Fetch API
	Fetch is a function that happen a asynchronously.
	Fetch return promise. With fetch we can get data or post data means call the data or send the data 

	function getData( ) {
		fetch( 'fetch url' )
		.then( (res) => res.json( ) ) //.text() or . blob ()
		.then ( ( data ) => { console.log ( data ) } )
		.catch( ( error ) => { console.log ( error ) } );
	}

	Post Data adding input values
	function getData( e ) {
		e.preventDefault( );
		var title= document.getElementById( 'name' );
		var desc= document.getElementById( 'name' );

		fetch( 'fetch url', {
			method : 'POST ',
			header : { 
				'Accept' : ' application/json, plan/json, / ',
				' Content-type' : ' application/json '
			},
			body : JSON.stringify( { title: title, body: desc })
		} )

		.then( (res) => res.json( ) )
		.then ( ( data ) => { console.log ( data ) } )
		.catch( ( error ) => { console.log ( error ) } );
	}

=> currying
=> lexical scope 
=> Pure function 
=> Temporal dead zone 
=> IIFE function 
=> Status of the Promises 
=> call back function 
=> generator function 
=> Template literal 
=> Arrow distrusting
=> different between normal function and arrow function.
=> Primative and non primative.
  




